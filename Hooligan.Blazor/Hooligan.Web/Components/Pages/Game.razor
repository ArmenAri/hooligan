@page "/Game"
@using HooliganNotification
@using Google.Protobuf.WellKnownTypes
@using Grpc.Core
@using Hooligan.Web.Models
@using Blazored.LocalStorage

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject NotificationService.NotificationServiceClient Client
@inject HooliganApiClient HooliganApi
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage;

<MudSnackbarProvider/>

<PageTitle>Game</PageTitle>

@if (IsLoaded)
{
    <MudDropContainer
        T="Item"
        Items="_items"
        ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)"
        ItemDropped="ItemUpdated">
        <ChildContent>
            <MudDropZone T="Item" Identifier="@Identifiers.Discoveries.ToString()" Class="d-flex flex-wrap"/>
        </ChildContent>
        <ItemRenderer>
            <MudPaper
                @key="@context.Name"
                id="@context.Name"
                @ondrop="@(() => HandleDrop(context))"
                Elevation="25"
                Class="pa-4 m-2">
                @context.Icon @context.Name.ToUpperOnlyFirstCharacterInvariant()
            </MudPaper>
        </ItemRenderer>
    </MudDropContainer>
}

@code {
    private bool IsLoaded { get; set; }

    private Item? TargetItem { get; set; }

    private void HandleDrop(Item item)
    {
        TargetItem = item;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var itemsInLocalStorage = await LocalStorage.GetItemAsync<List<Item>>("listOfAssociations");

        if (itemsInLocalStorage is not null)
        {
            _items = itemsInLocalStorage;
        }

        IsLoaded = true;
        StateHasChanged();

        var subscription = Client.Subscribe(new Empty());
        try
        {
            await foreach (var notification in subscription.ResponseStream.ReadAllAsync())
            {
                Snackbar.Add(notification?.Message, Severity.Success, options => { options.SuccessIcon = Icons.Material.Filled.Backpack; });
                StateHasChanged();
            }
        }
        catch (RpcException)
        {
            // ignored
        }
    }

    private async Task ItemUpdated(MudItemDropInfo<Item> dropItem)
    {
        ArgumentNullException.ThrowIfNull(dropItem.Item);

        if (TargetItem is not null)
        {
            var response = await HooliganApi.CreateAssociation(new CreateAssociationCommand
            (
                dropItem.Item.Name,
                TargetItem.Name
            ));

            if (response.IsFail())
            {
                Snackbar.Add(response.Error?.Message, Severity.Error, options => { options.ErrorIcon = Icons.Material.Filled.Error; });
            }
            else
            {
                _items.Add(new Item
                {
#pragma warning disable CS8601 // Possible null reference assignment.
                    Name = response.Value?.Result,
                    Icon = response.Value?.Icon
#pragma warning restore CS8601 // Possible null reference assignment.
                });

                await LocalStorage.SetItemAsync("listOfAssociations", _items);
            }
        }

        TargetItem = null;
    }

    private List<Item> _items =
    [
        new Item { Name = "earth", Icon = "üåç" },
        new Item { Name = "wind", Icon = "üå¨Ô∏è" },
        new Item { Name = "fire", Icon = "üî•" },
        new Item { Name = "water", Icon = "üíß" }
    ];
}