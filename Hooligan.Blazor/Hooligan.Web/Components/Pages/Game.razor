@page "/Game"
@using HooliganNotification
@using Google.Protobuf.WellKnownTypes
@using Grpc.Core
@using Hooligan.Web.Models
@using Blazored.LocalStorage

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject NotificationService.NotificationServiceClient Client
@inject HooliganApiClient HooliganApi
@inject ISnackbar Snackbar
@inject ILocalStorageService _localStorage;

<MudSnackbarProvider/>

<PageTitle>Game</PageTitle>

<MudDropContainer
    T="Item"
    Items="_items"
    ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)"
    ItemDropped="ItemUpdated">
    <ChildContent>
        <MudDropZone T="Item" Identifier="@Identifiers.Discoveries.ToString()" Class="d-flex flex-wrap"/>
    </ChildContent>
    <ItemRenderer>
        <MudPaper
            @key="@context.Name"
            id="@context.Name"
            @ondrop="@(() => HandleDrop(context))"
            Elevation="25"
            Class="pa-4 m-2">
            @context.Icon @context.Name.ToUpperOnlyFirstCharacterInvariant()
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>

@code {
    private Item? TargetItem { get; set; }

    private void HandleDrop(Item item)
    {
        TargetItem = item;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _items = _basicItems;
        Console.WriteLine("Before if : " + _items.Count);
        if (await _localStorage.ContainKeyAsync("listOfAssociations")) {
            var _itemsInLocalStorage = await _localStorage.GetItemAsync<List<Item>>("listOfAssociations");
            _items = _itemsInLocalStorage;
            Console.WriteLine(_items.Count);
            StateHasChanged();
        }
        StateHasChanged();
        Console.WriteLine("Out of if : " + _items.Count);

        var subscription = Client.Subscribe(new Empty());
        try
        {
            await foreach (var notification in subscription.ResponseStream.ReadAllAsync())
            {
                Snackbar.Add(notification?.Message, Severity.Success, options => { options.SuccessIcon = Icons.Material.Filled.Backpack; });
                StateHasChanged();
            }
        }
        catch(RpcException)
        {
            // ignored
        }
    }

    private async Task ItemUpdated(MudItemDropInfo<Item> dropItem)
    {
        ArgumentNullException.ThrowIfNull(dropItem.Item);

        if (TargetItem is not null)
        {
            var response = await HooliganApi.CreateAssociation(new CreateAssociationCommand
            (
                dropItem.Item.Name,
                TargetItem.Name
            ));

            if (response.IsFail())
            {
                Snackbar.Add(response.Error?.Message, Severity.Error, options => { options.ErrorIcon = Icons.Material.Filled.Error; });
            }
            else
            {
                _items.Add(new Item
                {
#pragma warning disable CS8601 // Possible null reference assignment.
                    Name = response.Value?.Result,
                    Icon = response.Value?.Icon
#pragma warning restore CS8601 // Possible null reference assignment.
                });
                
                await _localStorage.SetItemAsync("listOfAssociations", _items);
            }
        }
        TargetItem = null;
    }

    private readonly List<Item> _basicItems =
    [
        new Item { Name = "earth", Icon = "üåç" },
        new Item { Name = "wind", Icon = "üå¨Ô∏è" },
        new Item { Name = "fire", Icon = "üî•" },
        new Item { Name = "water", Icon = "üíß" }
    ];

    private List<Item> _items = [];
}