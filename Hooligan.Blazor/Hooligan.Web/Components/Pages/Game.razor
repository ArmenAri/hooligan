@page "/Game"
@using Hooligan.Web.Models
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IJSRuntime JSRuntime
@inject HooliganApiClient HooliganApi
@inject ILocalStorageService LocalStorage

<PageTitle>Game</PageTitle>

<h1>Hooligan Infinite Craft Game</h1>

<MudDropContainer
    T="DraggableItem"
    Items="Items"
    ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)"
    ItemDropped="ItemUpdated"
    Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
        <MudDropZone T="DraggableItem" Identifier="@Identifiers.Discoveries.ToString()" Class="rounded mud-background-gray pa-10 my-8 d-flex flew-row flex-lg-wrap">
            <ItemRenderer>
                <ItemPaper ChildContent="@context" OnDropCallBack="HandleDrop" OnDeleteCallBack="DeleteCurrentItem" />
            </ItemRenderer>
        </MudDropZone>
    </ChildContent>   
</MudDropContainer>


@code {
    private List<DraggableItem> Items = new List<DraggableItem>();

    private List<DraggableItem> OriginalItems = new List<DraggableItem>
    {
        new DraggableItem { Id = Guid.NewGuid(), Name = "earth", Icon = "🌍" },
        new DraggableItem { Id = Guid.NewGuid(), Name = "wind", Icon = "🌬️" },
        new DraggableItem { Id = Guid.NewGuid(), Name = "fire", Icon = "🔥" },
        new DraggableItem { Id = Guid.NewGuid(), Name = "water", Icon = "💧" }
    };

    private DraggableItem? TargetItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Items.AddRange(OriginalItems);
        Items.AddRange(await GetDraggableItemsFromLocalStorage());
    }

    public void HandleDrop(DraggableItem item)
    {
        TargetItem = item;
    }

    private async Task ItemUpdated(MudItemDropInfo<DraggableItem> dropItem)
    {
        ArgumentNullException.ThrowIfNull(dropItem.Item);

        if (TargetItem is not null)
        {
            var created = await HooliganApi.CreateAssociation(dropItem.Item.Name, TargetItem.Name);
            ArgumentNullException.ThrowIfNull(created);

            var newDraggableItem = new DraggableItem
            {
                Id = Guid.NewGuid(),
                Name = created.Result,
                Icon = created.Icon
            };

            Items.Add(newDraggableItem);

            var localStorageDraggableItems = await GetDraggableItemsFromLocalStorage();
            localStorageDraggableItems.Add(newDraggableItem);

            await LocalStorage.SetItemAsync<List<DraggableItem>>("Hooligan.User.Session", localStorageDraggableItems);
        }

        TargetItem = null;
    }

    private async Task DeleteCurrentItem(Guid itemId)
    {
        Items.Remove(Items.Where(item => item.Id == itemId).First());
        var localStorageDraggableItems = await GetDraggableItemsFromLocalStorage();
        localStorageDraggableItems.Remove(localStorageDraggableItems.Where(item => item.Id == itemId).First());
        await LocalStorage.SetItemAsync<List<DraggableItem>>("Hooligan.User.Session", localStorageDraggableItems);
    }

    private async Task<List<DraggableItem>> GetDraggableItemsFromLocalStorage()
    {
        var localStorageItems = await LocalStorage.GetItemAsync<List<DraggableItem>>("Hooligan.User.Session");
        if (localStorageItems is not null && localStorageItems.Any())
        {
            return localStorageItems.ToList();
        }
        return new List<DraggableItem>();
    }
}